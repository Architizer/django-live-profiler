{"name":"Django-live-profiler","tagline":"The unreasonably comprehensive performance analysis kit for Django","body":"Django-live-profiler allows profiling Django-based applications running in production with minimal performance overhead.\r\n\r\n---------\r\nRationale\r\n---------\r\nProfiling web applications on a development environment often produces misleading results due to different patterns in the data, different patterns in user behavior and differences in infrastructure. \r\n\r\nAll existing DB access profiling solutions for Django seem to be focusing on a single request. However, in the real world certain queries might be negligible in a single request while still putting a considerable strain the database across all requests.\r\n\r\n*django-live-profiler* aims to solve these issues by collecting database usage data from a live application.\r\n\r\n![screenshot](https://github.com/InviteBox/django-live-profiler/raw/master/doc/screenshot1.png)\r\n\r\n\r\n------------\r\nInstallation\r\n------------\r\n1. Run `pip install django-live-profiler`\r\n2. Add `'profiler'` app to `INSTALLED_APPS` \r\n3. Add `'profiler.middleware.ProfilerMiddleware'` to `MIDDLEWARE_CLASSES`\r\n4. Optionally add `'profiler.middleware.StatProfMiddleware'` to `MIDDLEWARE_CLASSES` to enable Python code statistical profiling (using statprof_). WARNING: this is an experimental feature, beware of possible incorrect output.\r\n5. Add `url(r'^profiler/', include('profiler.urls'))` to your urlconf\r\n\r\n.. _statprof: https://github.com/bos/statprof.py\r\n\r\nIn order to start gathering data you need to start the aggregation server::\r\n\r\n  $ aggregated --host 127.0.0.1 --port 5556\r\n\r\n\r\nVisit http://yoursite.com/profiler/ for results.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}